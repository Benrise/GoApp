@function rem($value, $current: 16) {
	$remValue: ($value / $current) + rem;
	@return $remValue;
}

@function em($px, $current: 16) {
	$result: ($px / $current) + em;
	@return $result;
}

@mixin transition-all($duration: 0.3s, $timing-function: ease-out) {
	-webkit-transition: all $duration $timing-function;
	-moz-transition: all $duration $timing-function;
	-o-transition: all $duration $timing-function;
	transition: all $duration $timing-function;
}

@mixin subtitle(
	$font-weight: 500,
	$font-size: 24,
	$font-size-mobile: 16,
	$line-height: 29,
	$color: #a94aa9,
	$opacity: 0.5
) {
	font-weight: $font-weight;
	@include adaptiveValue("font-size", $font-size, $font-size-mobile);
	@include adaptiveValue("line-height", $line-height, 19);
	color: $color;
	opacity: $opacity;
}

@mixin title {
	font-weight: 500;
	@include adaptiveValue("font-size", 32, 24);
	@include adaptiveValue("line-height", 39, 30);
	color: #a43ea4;
}

@mixin slider($class-name) {
	// FIX THAT (remove slider-area)
    .slider-area {
        width: 100%;
        position: relative;
        @include adaptiveValue('height',580,350);
        @extend %slider-setup;
        .#{$class-name}__slider {
            display: flex;
            flex-direction: row;
            height: 100%;
            width: 100%;
            overflow-x: hidden;
        }
        @media (max-width: $mobileXSmall) {
            height: rem(400);
        }
    }
}

// Адаптивное свойство (clamp)
@mixin adaptiveValue($property, $startSize, $minSize, $widthFrom: $containerWidth, $widthTo: $minWidth, $keepSize: 0) {
	// Для calc();
	$addSize: ($startSize - $minSize);
	@if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
		$widthFrom: $maxWidth;
	}
	@if ($minSize <= 0) {
		$minSize: 0.0001;
	}
	@if ($startSize <= 0) {
		$startSize: 0.0001;
	}

	// Брейк-поинты в EM
	$widthFromMedia: em($widthFrom);
	$widthToMedia: em($widthTo);

	// Формула плавающего значения
	// Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
	$slope: ($startSize - $minSize) / ($widthFrom - $widthTo);
	$yIntersection: -$widthTo * $slope + $minSize;
	$flyValue: #{rem($yIntersection)}" + " #{($slope * 100)}vw;

	// Получение значения свойства
	$propertyValue: #{"clamp(" rem($minSize) "," $flyValue "," rem($startSize) ")"};
	// Если отрицательные значения
	@if ($minSize > $startSize) {
		$propertyValue: #{"clamp(" rem($startSize) "," $flyValue "," rem($minSize) ")"};
	}

	@if $widthFrom == $containerWidth or $widthFrom == $maxWidth or $keepSize == 1 or $keepSize == 2 {
		@media (min-width: $widthFromMedia) {
			#{$property}: rem($startSize);
		}
	}
	@media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
		// Если поддерживается clamp();
		@supports (#{$property}: $propertyValue) {
			#{$property}: $propertyValue;
		}
		// Если не поддерживается clamp();
		@supports not (#{$property}: $propertyValue) {
			#{$property}: calc(
				#{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) / #{(($widthFrom / 16) - ($widthTo / 16))}
			);
		}
	}
	@if $widthTo == $minWidth or $keepSize == 1 or $keepSize == 3 {
		@media (max-width: $widthToMedia) {
			#{$property}: rem($minSize);
		}
	}
}
